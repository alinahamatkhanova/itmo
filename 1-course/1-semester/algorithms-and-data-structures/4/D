#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct RatingCode {
    long rating; long code;
};
struct FeeCode {
    long fee; long code;
};

int main() {
    long cities;
    cin >> cities;
    vector<RatingCode> ratingCode;
    vector<FeeCode> feeCode;
    for (int i = 0; i < cities; ++i) {
        long code, rating, fee;
        cin >> code >> rating >> fee;
        ratingCode.push_back({ rating, code });
        feeCode.push_back({ fee, code });
    }
    sort(begin(ratingCode), end(ratingCode), [](const RatingCode& lhs, const RatingCode& rhs) {
        return tie(lhs.rating, lhs.code) > tie(rhs.rating, rhs.code); });
    sort(begin(feeCode), end(feeCode), [](const FeeCode& lhs, const FeeCode& rhs) {
        return tie(lhs.fee, lhs.code) > tie(rhs.fee, rhs.code); });

    int answersCount;
    cin >> answersCount;
    vector<string> answers(answersCount);
    for (auto& answer : answers) {
        cin >> answer;
    }

    vector<bool> visited(cities + 1, false);
    size_t j = 0; size_t k = 0;
    queue<int> tour;
    for (size_t i = 0; i < ratingCode.size(); ++i) {
        while (j < feeCode.size() && visited[feeCode[j].code]) j++;

        if (ratingCode[i].code == feeCode[j].code) {
            tour.push(ratingCode[i].code);
            visited[ratingCode[i].code] = true;
            j++;
            continue;
        }

        if (k >= answers.size()) {
            continue;
        }

        cout << ratingCode[i].code << ' ';
        if (answers[k] == "YES") {
            tour.push(ratingCode[i].code);
        }
        k++;
        visited[ratingCode[i].code] = true;
    }

    if (!tour.empty()) {
        cout << '\n';
    }
    while (!tour.empty()) {
        cout << tour.front() << ' ';
        tour.pop();
    }
}
